# -*- coding: utf-8 -*-
"""Rock Paper Scissor with Deep Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vJg3u9Z09th2K68_YYh6iQV7j5G2sd5w
"""

import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt

(train_ds,test_ds),ds_info=tfds.load(
    "rock_paper_scissors",
    split=["train","test"],
    as_supervised=True,
    with_info=True
)

def format_image(image,label):
  image=tf.image.resize(image,(100,100))
  image=image/255.0
  return image,label

train_ds=train_ds.map(format_image).batch(32).shuffle(500)
test_ds=test_ds.map(format_image).batch(32)

model=tf.keras.Sequential([
    tf.keras.layers.Conv2D(32,(3,3),activation="relu",input_shape=(100,100,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64,(3,3),activation="relu"),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128,activation="relu"),
    tf.keras.layers.Dense(3,activation="softmax")
])

model.compile(optimizer="adam",loss="sparse_categorical_crossentropy",metrics=["accuracy"])

model.fit(train_ds,epochs=10,validation_data=test_ds)

loss,acc=model.evaluate(test_ds)
print(acc)

for images, labels in test_ds.take(1):
    preds = model.predict(images)
    for i in range(5):
        plt.imshow(images[i])
        plt.title(f"Predicted: {tf.argmax(preds[i]).numpy()}, True: {labels[i].numpy()}")
        plt.axis('off')
        plt.show()

