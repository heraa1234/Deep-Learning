# -*- coding: utf-8 -*-
"""CIFAR-10 image classfication with CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jBDxEOG345rz9-UDeQllRCegns6Wb-Wl
"""

import tensorflow as tf
from tensorflow.keras import datasets,layers,models
import matplotlib.pyplot as plt
import numpy as np

#1.load image dataset
(train_images,train_labels),(test_images,test_labels)=datasets.cifar10.load_data()

#Normalize pixel values between 0 and 1
train_images,test_images=train_images/255.0,test_images/255.0

# Define class names for CIFAR-10
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']

#2.Visualize some sample images
plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i])
  plt.xlabel(class_names[train_labels[i][0]])
plt.show()

model=models.Sequential([
    layers.Conv2D(32,(3,3),activation='relu',input_shape=(32,32,3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation='relu'),
    layers.Flatten(),
    layers.Dense(64,activation='relu'),
    layers.Dense(10)
])

#4.Compile the model
model.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy']
            )

model.summary()

#Train the model
history=model.fit(train_images,train_labels,epochs=10,validation_data=(test_images,test_labels))

#Evaluate the model
test_loss,test_acc=model.evaluate(test_images,test_labels,verbose=2)
print(f"test_acc:,{test_acc:.4f}")

# 7. Plot training and validation accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# 8. Make predictions on test images
prediction=model.predict(test_images[:5])
prediction_label=np.argmax(prediction,axis=1)
print(prediction_label)

# Display predictions
for i in range(5):
    print(f"Image {i+1}: Predicted: {class_names[prediction_label[i]]}, Actual: {class_names[test_labels[i][0]]}")
    plt.imshow(test_images[i])
    plt.title(f"Predicted: {class_names[prediction_label[i]]}\nActual: {class_names[test_labels[i][0]]}")
    plt.show()

